/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <map>
#include "model/IfcPPBasicTypes.h"
#include "model/IfcPPException.h"
#include "reader/ReaderUtil.h"
#include "IFC4/include/IfcDerivedMeasureValue.h"
#include "IFC4/include/IfcAbsorbedDoseMeasure.h"
#include "IFC4/include/IfcAccelerationMeasure.h"
#include "IFC4/include/IfcAngularVelocityMeasure.h"
#include "IFC4/include/IfcAreaDensityMeasure.h"
#include "IFC4/include/IfcCompoundPlaneAngleMeasure.h"
#include "IFC4/include/IfcCurvatureMeasure.h"
#include "IFC4/include/IfcDoseEquivalentMeasure.h"
#include "IFC4/include/IfcDynamicViscosityMeasure.h"
#include "IFC4/include/IfcElectricCapacitanceMeasure.h"
#include "IFC4/include/IfcElectricChargeMeasure.h"
#include "IFC4/include/IfcElectricConductanceMeasure.h"
#include "IFC4/include/IfcElectricResistanceMeasure.h"
#include "IFC4/include/IfcElectricVoltageMeasure.h"
#include "IFC4/include/IfcEnergyMeasure.h"
#include "IFC4/include/IfcForceMeasure.h"
#include "IFC4/include/IfcFrequencyMeasure.h"
#include "IFC4/include/IfcHeatFluxDensityMeasure.h"
#include "IFC4/include/IfcHeatingValueMeasure.h"
#include "IFC4/include/IfcIlluminanceMeasure.h"
#include "IFC4/include/IfcInductanceMeasure.h"
#include "IFC4/include/IfcIntegerCountRateMeasure.h"
#include "IFC4/include/IfcIonConcentrationMeasure.h"
#include "IFC4/include/IfcIsothermalMoistureCapacityMeasure.h"
#include "IFC4/include/IfcKinematicViscosityMeasure.h"
#include "IFC4/include/IfcLinearForceMeasure.h"
#include "IFC4/include/IfcLinearMomentMeasure.h"
#include "IFC4/include/IfcLinearStiffnessMeasure.h"
#include "IFC4/include/IfcLinearVelocityMeasure.h"
#include "IFC4/include/IfcLuminousFluxMeasure.h"
#include "IFC4/include/IfcLuminousIntensityDistributionMeasure.h"
#include "IFC4/include/IfcMagneticFluxDensityMeasure.h"
#include "IFC4/include/IfcMagneticFluxMeasure.h"
#include "IFC4/include/IfcMassDensityMeasure.h"
#include "IFC4/include/IfcMassFlowRateMeasure.h"
#include "IFC4/include/IfcMassPerLengthMeasure.h"
#include "IFC4/include/IfcModulusOfElasticityMeasure.h"
#include "IFC4/include/IfcModulusOfLinearSubgradeReactionMeasure.h"
#include "IFC4/include/IfcModulusOfRotationalSubgradeReactionMeasure.h"
#include "IFC4/include/IfcModulusOfSubgradeReactionMeasure.h"
#include "IFC4/include/IfcMoistureDiffusivityMeasure.h"
#include "IFC4/include/IfcMolecularWeightMeasure.h"
#include "IFC4/include/IfcMomentOfInertiaMeasure.h"
#include "IFC4/include/IfcMonetaryMeasure.h"
#include "IFC4/include/IfcPHMeasure.h"
#include "IFC4/include/IfcPlanarForceMeasure.h"
#include "IFC4/include/IfcPowerMeasure.h"
#include "IFC4/include/IfcPressureMeasure.h"
#include "IFC4/include/IfcRadioActivityMeasure.h"
#include "IFC4/include/IfcRotationalFrequencyMeasure.h"
#include "IFC4/include/IfcRotationalMassMeasure.h"
#include "IFC4/include/IfcRotationalStiffnessMeasure.h"
#include "IFC4/include/IfcSectionModulusMeasure.h"
#include "IFC4/include/IfcSectionalAreaIntegralMeasure.h"
#include "IFC4/include/IfcShearModulusMeasure.h"
#include "IFC4/include/IfcSoundPowerLevelMeasure.h"
#include "IFC4/include/IfcSoundPowerMeasure.h"
#include "IFC4/include/IfcSoundPressureLevelMeasure.h"
#include "IFC4/include/IfcSoundPressureMeasure.h"
#include "IFC4/include/IfcSpecificHeatCapacityMeasure.h"
#include "IFC4/include/IfcTemperatureGradientMeasure.h"
#include "IFC4/include/IfcTemperatureRateOfChangeMeasure.h"
#include "IFC4/include/IfcThermalAdmittanceMeasure.h"
#include "IFC4/include/IfcThermalConductivityMeasure.h"
#include "IFC4/include/IfcThermalExpansionCoefficientMeasure.h"
#include "IFC4/include/IfcThermalResistanceMeasure.h"
#include "IFC4/include/IfcThermalTransmittanceMeasure.h"
#include "IFC4/include/IfcTorqueMeasure.h"
#include "IFC4/include/IfcVaporPermeabilityMeasure.h"
#include "IFC4/include/IfcVolumetricFlowRateMeasure.h"
#include "IFC4/include/IfcWarpingConstantMeasure.h"
#include "IFC4/include/IfcWarpingMomentMeasure.h"
#include "IFC4/include/IfcMeasureValue.h"
#include "IFC4/include/IfcAmountOfSubstanceMeasure.h"
#include "IFC4/include/IfcAreaMeasure.h"
#include "IFC4/include/IfcComplexNumber.h"
#include "IFC4/include/IfcContextDependentMeasure.h"
#include "IFC4/include/IfcCountMeasure.h"
#include "IFC4/include/IfcDescriptiveMeasure.h"
#include "IFC4/include/IfcElectricCurrentMeasure.h"
#include "IFC4/include/IfcLengthMeasure.h"
#include "IFC4/include/IfcLuminousIntensityMeasure.h"
#include "IFC4/include/IfcMassMeasure.h"
#include "IFC4/include/IfcNonNegativeLengthMeasure.h"
#include "IFC4/include/IfcNormalisedRatioMeasure.h"
#include "IFC4/include/IfcNumericMeasure.h"
#include "IFC4/include/IfcParameterValue.h"
#include "IFC4/include/IfcPlaneAngleMeasure.h"
#include "IFC4/include/IfcPositiveLengthMeasure.h"
#include "IFC4/include/IfcPositivePlaneAngleMeasure.h"
#include "IFC4/include/IfcPositiveRatioMeasure.h"
#include "IFC4/include/IfcRatioMeasure.h"
#include "IFC4/include/IfcSolidAngleMeasure.h"
#include "IFC4/include/IfcThermodynamicTemperatureMeasure.h"
#include "IFC4/include/IfcTimeMeasure.h"
#include "IFC4/include/IfcVolumeMeasure.h"
#include "IFC4/include/IfcSimpleValue.h"
#include "IFC4/include/IfcBinary.h"
#include "IFC4/include/IfcBoolean.h"
#include "IFC4/include/IfcDate.h"
#include "IFC4/include/IfcDateTime.h"
#include "IFC4/include/IfcDuration.h"
#include "IFC4/include/IfcIdentifier.h"
#include "IFC4/include/IfcInteger.h"
#include "IFC4/include/IfcLabel.h"
#include "IFC4/include/IfcLogical.h"
#include "IFC4/include/IfcPositiveInteger.h"
#include "IFC4/include/IfcReal.h"
#include "IFC4/include/IfcText.h"
#include "IFC4/include/IfcTime.h"
#include "IFC4/include/IfcTimeStamp.h"
#include "IFC4/include/IfcAppliedValueSelect.h"
#include "IFC4/include/IfcMetricValueSelect.h"
#include "IFC4/include/IfcValue.h"

// TYPE IfcValue = SELECT	(IfcDerivedMeasureValue	,IfcMeasureValue	,IfcSimpleValue);
shared_ptr<IfcValue> IfcValue::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<IfcPPEntity> >& map )
{
	if( arg.size() == 0 ){ return shared_ptr<IfcValue>(); }
	if( arg.compare(L"$")==0 )
	{
		return shared_ptr<IfcValue>();
	}
	if( arg.compare(L"*")==0 )
	{
		return shared_ptr<IfcValue>();
	}
	shared_ptr<IfcValue> result_object;
	readSelectType( arg, result_object, map );
	return result_object;
}
