/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "model/IfcPPException.h"
#include "model/IfcPPAttributeObject.h"
#include "model/IfcPPGuid.h"
#include "reader/ReaderUtil.h"
#include "writer/WriterUtil.h"
#include "IFC4/include/IfcLocalPlacement.h"
#include "IFC4/include/IfcObjectPlacement.h"
#include "IFC4/include/IfcProduct.h"

// ENTITY IfcObjectPlacement 
IfcObjectPlacement::IfcObjectPlacement() {}
IfcObjectPlacement::IfcObjectPlacement( int id ) { m_entity_id = id; }
IfcObjectPlacement::~IfcObjectPlacement() {}
shared_ptr<IfcPPObject> IfcObjectPlacement::getDeepCopy( IfcPPCopyOptions& options )
{
	shared_ptr<IfcObjectPlacement> copy_self( new IfcObjectPlacement() );
	return copy_self;
}
void IfcObjectPlacement::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_entity_id << "= IFCOBJECTPLACEMENT" << "(";
	stream << ");";
}
void IfcObjectPlacement::getStepParameter( std::stringstream& stream, bool ) const { stream << "#" << m_entity_id; }
const std::wstring IfcObjectPlacement::toString() const { return L"IfcObjectPlacement"; }
void IfcObjectPlacement::readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<IfcPPEntity> >& map )
{
}
void IfcObjectPlacement::getAttributes( std::vector<std::pair<std::string, shared_ptr<IfcPPObject> > >& vec_attributes )
{
}
void IfcObjectPlacement::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<IfcPPObject> > >& vec_attributes_inverse )
{
	if( m_PlacesObject_inverse.size() > 0 )
	{
		shared_ptr<IfcPPAttributeObjectVector> PlacesObject_inverse_vec_obj( new IfcPPAttributeObjectVector() );
		for( size_t i=0; i<m_PlacesObject_inverse.size(); ++i )
		{
			if( !m_PlacesObject_inverse[i].expired() )
			{
				PlacesObject_inverse_vec_obj->m_vec.push_back( shared_ptr<IfcProduct>( m_PlacesObject_inverse[i] ) );
			}
		}
		vec_attributes_inverse.push_back( std::make_pair( "PlacesObject_inverse", PlacesObject_inverse_vec_obj ) );
	}
	if( m_ReferencedByPlacements_inverse.size() > 0 )
	{
		shared_ptr<IfcPPAttributeObjectVector> ReferencedByPlacements_inverse_vec_obj( new IfcPPAttributeObjectVector() );
		for( size_t i=0; i<m_ReferencedByPlacements_inverse.size(); ++i )
		{
			if( !m_ReferencedByPlacements_inverse[i].expired() )
			{
				ReferencedByPlacements_inverse_vec_obj->m_vec.push_back( shared_ptr<IfcLocalPlacement>( m_ReferencedByPlacements_inverse[i] ) );
			}
		}
		vec_attributes_inverse.push_back( std::make_pair( "ReferencedByPlacements_inverse", ReferencedByPlacements_inverse_vec_obj ) );
	}
}
void IfcObjectPlacement::setInverseCounterparts( shared_ptr<IfcPPEntity> )
{
}
void IfcObjectPlacement::unlinkFromInverseCounterparts()
{
}
