/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "model/IfcPPException.h"
#include "model/IfcPPAttributeObject.h"
#include "model/IfcPPGuid.h"
#include "reader/ReaderUtil.h"
#include "writer/WriterUtil.h"
#include "IFC4/include/IfcActorRole.h"
#include "IFC4/include/IfcAddress.h"
#include "IFC4/include/IfcIdentifier.h"
#include "IFC4/include/IfcLabel.h"
#include "IFC4/include/IfcOrganization.h"
#include "IFC4/include/IfcOrganizationRelationship.h"
#include "IFC4/include/IfcPersonAndOrganization.h"
#include "IFC4/include/IfcText.h"

// ENTITY IfcOrganization 
IfcOrganization::IfcOrganization() {}
IfcOrganization::IfcOrganization( int id ) { m_entity_id = id; }
IfcOrganization::~IfcOrganization() {}
shared_ptr<IfcPPObject> IfcOrganization::getDeepCopy( IfcPPCopyOptions& options )
{
	shared_ptr<IfcOrganization> copy_self( new IfcOrganization() );
	if( m_Identification ) { copy_self->m_Identification = dynamic_pointer_cast<IfcIdentifier>( m_Identification->getDeepCopy(options) ); }
	if( m_Name ) { copy_self->m_Name = dynamic_pointer_cast<IfcLabel>( m_Name->getDeepCopy(options) ); }
	if( m_Description ) { copy_self->m_Description = dynamic_pointer_cast<IfcText>( m_Description->getDeepCopy(options) ); }
	for( size_t ii=0; ii<m_Roles.size(); ++ii )
	{
		auto item_ii = m_Roles[ii];
		if( item_ii )
		{
			copy_self->m_Roles.push_back( dynamic_pointer_cast<IfcActorRole>(item_ii->getDeepCopy(options) ) );
		}
	}
	for( size_t ii=0; ii<m_Addresses.size(); ++ii )
	{
		auto item_ii = m_Addresses[ii];
		if( item_ii )
		{
			copy_self->m_Addresses.push_back( dynamic_pointer_cast<IfcAddress>(item_ii->getDeepCopy(options) ) );
		}
	}
	return copy_self;
}
void IfcOrganization::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_entity_id << "= IFCORGANIZATION" << "(";
	if( m_Identification ) { m_Identification->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Name ) { m_Name->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Description ) { m_Description->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	writeEntityList( stream, m_Roles );
	stream << ",";
	writeEntityList( stream, m_Addresses );
	stream << ");";
}
void IfcOrganization::getStepParameter( std::stringstream& stream, bool ) const { stream << "#" << m_entity_id; }
const std::wstring IfcOrganization::toString() const { return L"IfcOrganization"; }
void IfcOrganization::readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<IfcPPEntity> >& map )
{
	const size_t num_args = args.size();
	if( num_args != 5 ){ std::stringstream err; err << "Wrong parameter count for entity IfcOrganization, expecting 5, having " << num_args << ". Entity ID: " << m_entity_id << std::endl; throw IfcPPException( err.str().c_str() ); }
	m_Identification = IfcIdentifier::createObjectFromSTEP( args[0], map );
	m_Name = IfcLabel::createObjectFromSTEP( args[1], map );
	m_Description = IfcText::createObjectFromSTEP( args[2], map );
	readEntityReferenceList( args[3], m_Roles, map );
	readEntityReferenceList( args[4], m_Addresses, map );
}
void IfcOrganization::getAttributes( std::vector<std::pair<std::string, shared_ptr<IfcPPObject> > >& vec_attributes )
{
	vec_attributes.push_back( std::make_pair( "Identification", m_Identification ) );
	vec_attributes.push_back( std::make_pair( "Name", m_Name ) );
	vec_attributes.push_back( std::make_pair( "Description", m_Description ) );
	if( m_Roles.size() > 0 )
	{
		shared_ptr<IfcPPAttributeObjectVector> Roles_vec_object( new IfcPPAttributeObjectVector() );
		std::copy( m_Roles.begin(), m_Roles.end(), std::back_inserter( Roles_vec_object->m_vec ) );
		vec_attributes.push_back( std::make_pair( "Roles", Roles_vec_object ) );
	}
	if( m_Addresses.size() > 0 )
	{
		shared_ptr<IfcPPAttributeObjectVector> Addresses_vec_object( new IfcPPAttributeObjectVector() );
		std::copy( m_Addresses.begin(), m_Addresses.end(), std::back_inserter( Addresses_vec_object->m_vec ) );
		vec_attributes.push_back( std::make_pair( "Addresses", Addresses_vec_object ) );
	}
}
void IfcOrganization::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<IfcPPObject> > >& vec_attributes_inverse )
{
	if( m_IsRelatedBy_inverse.size() > 0 )
	{
		shared_ptr<IfcPPAttributeObjectVector> IsRelatedBy_inverse_vec_obj( new IfcPPAttributeObjectVector() );
		for( size_t i=0; i<m_IsRelatedBy_inverse.size(); ++i )
		{
			if( !m_IsRelatedBy_inverse[i].expired() )
			{
				IsRelatedBy_inverse_vec_obj->m_vec.push_back( shared_ptr<IfcOrganizationRelationship>( m_IsRelatedBy_inverse[i] ) );
			}
		}
		vec_attributes_inverse.push_back( std::make_pair( "IsRelatedBy_inverse", IsRelatedBy_inverse_vec_obj ) );
	}
	if( m_Relates_inverse.size() > 0 )
	{
		shared_ptr<IfcPPAttributeObjectVector> Relates_inverse_vec_obj( new IfcPPAttributeObjectVector() );
		for( size_t i=0; i<m_Relates_inverse.size(); ++i )
		{
			if( !m_Relates_inverse[i].expired() )
			{
				Relates_inverse_vec_obj->m_vec.push_back( shared_ptr<IfcOrganizationRelationship>( m_Relates_inverse[i] ) );
			}
		}
		vec_attributes_inverse.push_back( std::make_pair( "Relates_inverse", Relates_inverse_vec_obj ) );
	}
	if( m_Engages_inverse.size() > 0 )
	{
		shared_ptr<IfcPPAttributeObjectVector> Engages_inverse_vec_obj( new IfcPPAttributeObjectVector() );
		for( size_t i=0; i<m_Engages_inverse.size(); ++i )
		{
			if( !m_Engages_inverse[i].expired() )
			{
				Engages_inverse_vec_obj->m_vec.push_back( shared_ptr<IfcPersonAndOrganization>( m_Engages_inverse[i] ) );
			}
		}
		vec_attributes_inverse.push_back( std::make_pair( "Engages_inverse", Engages_inverse_vec_obj ) );
	}
}
void IfcOrganization::setInverseCounterparts( shared_ptr<IfcPPEntity> ptr_self_entity )
{
	shared_ptr<IfcOrganization> ptr_self = dynamic_pointer_cast<IfcOrganization>( ptr_self_entity );
	if( !ptr_self ) { throw IfcPPException( "IfcOrganization::setInverseCounterparts: type mismatch" ); }
	for( size_t i=0; i<m_Addresses.size(); ++i )
	{
		if( m_Addresses[i] )
		{
			m_Addresses[i]->m_OfOrganization_inverse.push_back( ptr_self );
		}
	}
}
void IfcOrganization::unlinkFromInverseCounterparts()
{
	for( size_t i=0; i<m_Addresses.size(); ++i )
	{
		if( m_Addresses[i] )
		{
			std::vector<weak_ptr<IfcOrganization> >& OfOrganization_inverse = m_Addresses[i]->m_OfOrganization_inverse;
			for( auto it_OfOrganization_inverse = OfOrganization_inverse.begin(); it_OfOrganization_inverse != OfOrganization_inverse.end(); )
			{
				shared_ptr<IfcOrganization> self_candidate( *it_OfOrganization_inverse );
				if( self_candidate.get() == this )
				{
					it_OfOrganization_inverse= OfOrganization_inverse.erase( it_OfOrganization_inverse );
				}
				else
				{
					++it_OfOrganization_inverse;
				}
			}
		}
	}
}
