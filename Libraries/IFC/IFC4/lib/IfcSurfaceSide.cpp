/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "reader/ReaderUtil.h"
#include "writer/WriterUtil.h"
#include "model/IfcPPBasicTypes.h"
#include "model/IfcPPException.h"
#include "IFC4/include/IfcSurfaceSide.h"

// TYPE IfcSurfaceSide = ENUMERATION OF	(POSITIVE	,NEGATIVE	,BOTH);
IfcSurfaceSide::IfcSurfaceSide() {}
IfcSurfaceSide::~IfcSurfaceSide() {}
shared_ptr<IfcPPObject> IfcSurfaceSide::getDeepCopy( IfcPPCopyOptions& options )
{
	shared_ptr<IfcSurfaceSide> copy_self( new IfcSurfaceSide() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcSurfaceSide::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCSURFACESIDE("; }
	switch( m_enum )
	{
		case ENUM_POSITIVE:	stream << ".POSITIVE."; break;
		case ENUM_NEGATIVE:	stream << ".NEGATIVE."; break;
		case ENUM_BOTH:	stream << ".BOTH."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcSurfaceSide::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_POSITIVE:	return L"POSITIVE";
		case ENUM_NEGATIVE:	return L"NEGATIVE";
		case ENUM_BOTH:	return L"BOTH";
	}
	return L"";
}
shared_ptr<IfcSurfaceSide> IfcSurfaceSide::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<IfcPPEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcSurfaceSide>(); }
	else if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcSurfaceSide>(); }
	shared_ptr<IfcSurfaceSide> type_object( new IfcSurfaceSide() );
	if( boost::iequals( arg, L".POSITIVE." ) )
	{
		type_object->m_enum = IfcSurfaceSide::ENUM_POSITIVE;
	}
	else if( boost::iequals( arg, L".NEGATIVE." ) )
	{
		type_object->m_enum = IfcSurfaceSide::ENUM_NEGATIVE;
	}
	else if( boost::iequals( arg, L".BOTH." ) )
	{
		type_object->m_enum = IfcSurfaceSide::ENUM_BOTH;
	}
	return type_object;
}
