/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "model/IfcPPException.h"
#include "model/IfcPPAttributeObject.h"
#include "model/IfcPPGuid.h"
#include "reader/ReaderUtil.h"
#include "writer/WriterUtil.h"
#include "IFC4/include/IfcDirection.h"
#include "IFC4/include/IfcLengthMeasure.h"
#include "IFC4/include/IfcPresentationLayerAssignment.h"
#include "IFC4/include/IfcStyledItem.h"
#include "IFC4/include/IfcVector.h"

// ENTITY IfcVector 
IfcVector::IfcVector() {}
IfcVector::IfcVector( int id ) { m_entity_id = id; }
IfcVector::~IfcVector() {}
shared_ptr<IfcPPObject> IfcVector::getDeepCopy( IfcPPCopyOptions& options )
{
	shared_ptr<IfcVector> copy_self( new IfcVector() );
	if( m_Orientation ) { copy_self->m_Orientation = dynamic_pointer_cast<IfcDirection>( m_Orientation->getDeepCopy(options) ); }
	if( m_Magnitude ) { copy_self->m_Magnitude = dynamic_pointer_cast<IfcLengthMeasure>( m_Magnitude->getDeepCopy(options) ); }
	return copy_self;
}
void IfcVector::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_entity_id << "= IFCVECTOR" << "(";
	if( m_Orientation ) { stream << "#" << m_Orientation->m_entity_id; } else { stream << "$"; }
	stream << ",";
	if( m_Magnitude ) { m_Magnitude->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IfcVector::getStepParameter( std::stringstream& stream, bool ) const { stream << "#" << m_entity_id; }
const std::wstring IfcVector::toString() const { return L"IfcVector"; }
void IfcVector::readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<IfcPPEntity> >& map )
{
	const size_t num_args = args.size();
	if( num_args != 2 ){ std::stringstream err; err << "Wrong parameter count for entity IfcVector, expecting 2, having " << num_args << ". Entity ID: " << m_entity_id << std::endl; throw IfcPPException( err.str().c_str() ); }
	readEntityReference( args[0], m_Orientation, map );
	m_Magnitude = IfcLengthMeasure::createObjectFromSTEP( args[1], map );
}
void IfcVector::getAttributes( std::vector<std::pair<std::string, shared_ptr<IfcPPObject> > >& vec_attributes )
{
	IfcGeometricRepresentationItem::getAttributes( vec_attributes );
	vec_attributes.push_back( std::make_pair( "Orientation", m_Orientation ) );
	vec_attributes.push_back( std::make_pair( "Magnitude", m_Magnitude ) );
}
void IfcVector::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<IfcPPObject> > >& vec_attributes_inverse )
{
	IfcGeometricRepresentationItem::getAttributesInverse( vec_attributes_inverse );
}
void IfcVector::setInverseCounterparts( shared_ptr<IfcPPEntity> ptr_self_entity )
{
	IfcGeometricRepresentationItem::setInverseCounterparts( ptr_self_entity );
}
void IfcVector::unlinkFromInverseCounterparts()
{
	IfcGeometricRepresentationItem::unlinkFromInverseCounterparts();
}
