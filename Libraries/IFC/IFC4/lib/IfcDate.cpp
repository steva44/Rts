/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "reader/ReaderUtil.h"
#include "writer/WriterUtil.h"
#include "model/IfcPPBasicTypes.h"
#include "model/IfcPPException.h"
#include "IFC4/include/IfcSimpleValue.h"
#include "IFC4/include/IfcDate.h"

// TYPE IfcDate = STRING;
IfcDate::IfcDate() {}
IfcDate::IfcDate( std::wstring value ) { m_value = value; }
IfcDate::~IfcDate() {}
shared_ptr<IfcPPObject> IfcDate::getDeepCopy( IfcPPCopyOptions& options )
{
	shared_ptr<IfcDate> copy_self( new IfcDate() );
	copy_self->m_value = m_value;
	return copy_self;
}
void IfcDate::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCDATE("; }
	stream << "'" << encodeStepString( m_value ) << "'";
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcDate::toString() const
{
	return m_value;
}
shared_ptr<IfcDate> IfcDate::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<IfcPPEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcDate>(); }
	else if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcDate>(); }
	shared_ptr<IfcDate> type_object( new IfcDate() );
	readString( arg, type_object->m_value );
	return type_object;
}
