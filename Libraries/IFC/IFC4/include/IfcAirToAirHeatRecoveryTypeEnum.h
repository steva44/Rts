/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "IfcPPBasicTypes.h"
#include "IfcPPObject.h"
#include "IfcPPGlobal.h"

// TYPE IfcAirToAirHeatRecoveryTypeEnum = ENUMERATION OF	(FIXEDPLATECOUNTERFLOWEXCHANGER	,FIXEDPLATECROSSFLOWEXCHANGER	,FIXEDPLATEPARALLELFLOWEXCHANGER	,ROTARYWHEEL	,RUNAROUNDCOILLOOP	,HEATPIPE	,TWINTOWERENTHALPYRECOVERYLOOPS	,THERMOSIPHONSEALEDTUBEHEATEXCHANGERS	,THERMOSIPHONCOILTYPEHEATEXCHANGERS	,USERDEFINED	,NOTDEFINED);
class IFCPP_EXPORT IfcAirToAirHeatRecoveryTypeEnum : virtual public IfcPPObject
{
public:
	enum IfcAirToAirHeatRecoveryTypeEnumEnum
	{
		ENUM_FIXEDPLATECOUNTERFLOWEXCHANGER,
		ENUM_FIXEDPLATECROSSFLOWEXCHANGER,
		ENUM_FIXEDPLATEPARALLELFLOWEXCHANGER,
		ENUM_ROTARYWHEEL,
		ENUM_RUNAROUNDCOILLOOP,
		ENUM_HEATPIPE,
		ENUM_TWINTOWERENTHALPYRECOVERYLOOPS,
		ENUM_THERMOSIPHONSEALEDTUBEHEATEXCHANGERS,
		ENUM_THERMOSIPHONCOILTYPEHEATEXCHANGERS,
		ENUM_USERDEFINED,
		ENUM_NOTDEFINED
	};

	IfcAirToAirHeatRecoveryTypeEnum();
	IfcAirToAirHeatRecoveryTypeEnum( IfcAirToAirHeatRecoveryTypeEnumEnum e ) { m_enum = e; }
	~IfcAirToAirHeatRecoveryTypeEnum();
	virtual const char* className() const { return "IfcAirToAirHeatRecoveryTypeEnum"; }
	virtual shared_ptr<IfcPPObject> getDeepCopy( IfcPPCopyOptions& options );
	virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
	virtual const std::wstring toString() const;
	static shared_ptr<IfcAirToAirHeatRecoveryTypeEnum> createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<IfcPPEntity> >& map );
	IfcAirToAirHeatRecoveryTypeEnumEnum m_enum;
};

