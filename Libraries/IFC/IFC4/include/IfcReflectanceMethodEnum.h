/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "IfcPPBasicTypes.h"
#include "IfcPPObject.h"
#include "IfcPPGlobal.h"

// TYPE IfcReflectanceMethodEnum = ENUMERATION OF	(BLINN	,FLAT	,GLASS	,MATT	,METAL	,MIRROR	,PHONG	,PLASTIC	,STRAUSS	,NOTDEFINED);
class IFCPP_EXPORT IfcReflectanceMethodEnum : virtual public IfcPPObject
{
public:
	enum IfcReflectanceMethodEnumEnum
	{
		ENUM_BLINN,
		ENUM_FLAT,
		ENUM_GLASS,
		ENUM_MATT,
		ENUM_METAL,
		ENUM_MIRROR,
		ENUM_PHONG,
		ENUM_PLASTIC,
		ENUM_STRAUSS,
		ENUM_NOTDEFINED
	};

	IfcReflectanceMethodEnum();
	IfcReflectanceMethodEnum( IfcReflectanceMethodEnumEnum e ) { m_enum = e; }
	~IfcReflectanceMethodEnum();
	virtual const char* className() const { return "IfcReflectanceMethodEnum"; }
	virtual shared_ptr<IfcPPObject> getDeepCopy( IfcPPCopyOptions& options );
	virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
	virtual const std::wstring toString() const;
	static shared_ptr<IfcReflectanceMethodEnum> createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<IfcPPEntity> >& map );
	IfcReflectanceMethodEnumEnum m_enum;
};

