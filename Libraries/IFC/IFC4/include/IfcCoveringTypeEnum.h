/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "IfcPPBasicTypes.h"
#include "IfcPPObject.h"
#include "IfcPPGlobal.h"

// TYPE IfcCoveringTypeEnum = ENUMERATION OF	(CEILING	,FLOORING	,CLADDING	,ROOFING	,MOLDING	,SKIRTINGBOARD	,INSULATION	,MEMBRANE	,SLEEVING	,WRAPPING	,USERDEFINED	,NOTDEFINED);
class IFCPP_EXPORT IfcCoveringTypeEnum : virtual public IfcPPObject
{
public:
	enum IfcCoveringTypeEnumEnum
	{
		ENUM_CEILING,
		ENUM_FLOORING,
		ENUM_CLADDING,
		ENUM_ROOFING,
		ENUM_MOLDING,
		ENUM_SKIRTINGBOARD,
		ENUM_INSULATION,
		ENUM_MEMBRANE,
		ENUM_SLEEVING,
		ENUM_WRAPPING,
		ENUM_USERDEFINED,
		ENUM_NOTDEFINED
	};

	IfcCoveringTypeEnum();
	IfcCoveringTypeEnum( IfcCoveringTypeEnumEnum e ) { m_enum = e; }
	~IfcCoveringTypeEnum();
	virtual const char* className() const { return "IfcCoveringTypeEnum"; }
	virtual shared_ptr<IfcPPObject> getDeepCopy( IfcPPCopyOptions& options );
	virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
	virtual const std::wstring toString() const;
	static shared_ptr<IfcCoveringTypeEnum> createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<IfcPPEntity> >& map );
	IfcCoveringTypeEnumEnum m_enum;
};

