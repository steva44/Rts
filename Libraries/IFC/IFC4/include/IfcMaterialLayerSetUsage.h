/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "IfcPPBasicTypes.h"
#include "IfcPPObject.h"
#include "IfcPPGlobal.h"
#include "IfcMaterialUsageDefinition.h"
class IFCPP_EXPORT IfcMaterialLayerSet;
class IFCPP_EXPORT IfcLayerSetDirectionEnum;
class IFCPP_EXPORT IfcDirectionSenseEnum;
class IFCPP_EXPORT IfcLengthMeasure;
class IFCPP_EXPORT IfcPositiveLengthMeasure;
//ENTITY
class IFCPP_EXPORT IfcMaterialLayerSetUsage : public IfcMaterialUsageDefinition
{ 
public:
	IfcMaterialLayerSetUsage();
	IfcMaterialLayerSetUsage( int id );
	~IfcMaterialLayerSetUsage();
	virtual shared_ptr<IfcPPObject> getDeepCopy( IfcPPCopyOptions& options );
	virtual void getStepLine( std::stringstream& stream ) const;
	virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
	virtual void readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<IfcPPEntity> >& map );
	virtual void setInverseCounterparts( shared_ptr<IfcPPEntity> ptr_self );
	virtual size_t getNumAttributes() { return 5; }
	virtual void getAttributes( std::vector<std::pair<std::string, shared_ptr<IfcPPObject> > >& vec_attributes );
	virtual void getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<IfcPPObject> > >& vec_attributes );
	virtual void unlinkFromInverseCounterparts();
	virtual const char* className() const { return "IfcMaterialLayerSetUsage"; }
	virtual const std::wstring toString() const;


	// IfcMaterialUsageDefinition -----------------------------------------------------------
	// inverse attributes:
	//  std::vector<weak_ptr<IfcRelAssociatesMaterial> >	m_AssociatedTo_inverse;

	// IfcMaterialLayerSetUsage -----------------------------------------------------------
	// attributes:
	shared_ptr<IfcMaterialLayerSet>						m_ForLayerSet;
	shared_ptr<IfcLayerSetDirectionEnum>				m_LayerSetDirection;
	shared_ptr<IfcDirectionSenseEnum>					m_DirectionSense;
	shared_ptr<IfcLengthMeasure>						m_OffsetFromReferenceLine;
	shared_ptr<IfcPositiveLengthMeasure>				m_ReferenceExtent;			//optional
};

