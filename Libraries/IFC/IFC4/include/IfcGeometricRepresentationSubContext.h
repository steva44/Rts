/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "IfcPPBasicTypes.h"
#include "IfcPPObject.h"
#include "IfcPPGlobal.h"
#include "IfcGeometricRepresentationContext.h"
class IFCPP_EXPORT IfcGeometricRepresentationContext;
class IFCPP_EXPORT IfcPositiveRatioMeasure;
class IFCPP_EXPORT IfcGeometricProjectionEnum;
class IFCPP_EXPORT IfcLabel;
//ENTITY
class IFCPP_EXPORT IfcGeometricRepresentationSubContext : public IfcGeometricRepresentationContext
{ 
public:
	IfcGeometricRepresentationSubContext();
	IfcGeometricRepresentationSubContext( int id );
	~IfcGeometricRepresentationSubContext();
	virtual shared_ptr<IfcPPObject> getDeepCopy( IfcPPCopyOptions& options );
	virtual void getStepLine( std::stringstream& stream ) const;
	virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
	virtual void readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<IfcPPEntity> >& map );
	virtual void setInverseCounterparts( shared_ptr<IfcPPEntity> ptr_self );
	virtual size_t getNumAttributes() { return 10; }
	virtual void getAttributes( std::vector<std::pair<std::string, shared_ptr<IfcPPObject> > >& vec_attributes );
	virtual void getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<IfcPPObject> > >& vec_attributes );
	virtual void unlinkFromInverseCounterparts();
	virtual const char* className() const { return "IfcGeometricRepresentationSubContext"; }
	virtual const std::wstring toString() const;


	// IfcRepresentationContext -----------------------------------------------------------
	// attributes:
	//  shared_ptr<IfcLabel>											m_ContextIdentifier;		//optional
	//  shared_ptr<IfcLabel>											m_ContextType;				//optional
	// inverse attributes:
	//  std::vector<weak_ptr<IfcRepresentation> >						m_RepresentationsInContext_inverse;

	// IfcGeometricRepresentationContext -----------------------------------------------------------
	// attributes:
	//  shared_ptr<IfcDimensionCount>									m_CoordinateSpaceDimension;
	//  shared_ptr<IfcReal>												m_Precision;				//optional
	//  shared_ptr<IfcAxis2Placement>									m_WorldCoordinateSystem;
	//  shared_ptr<IfcDirection>										m_TrueNorth;				//optional
	// inverse attributes:
	//  std::vector<weak_ptr<IfcGeometricRepresentationSubContext> >	m_HasSubContexts_inverse;
	//  std::vector<weak_ptr<IfcCoordinateOperation> >					m_HasCoordinateOperation_inverse;

	// IfcGeometricRepresentationSubContext -----------------------------------------------------------
	// attributes:
	shared_ptr<IfcGeometricRepresentationContext>					m_ParentContext;
	shared_ptr<IfcPositiveRatioMeasure>								m_TargetScale;				//optional
	shared_ptr<IfcGeometricProjectionEnum>							m_TargetView;
	shared_ptr<IfcLabel>											m_UserDefinedTargetView;	//optional
};

