/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "IfcPPBasicTypes.h"
#include "IfcPPObject.h"
#include "IfcPPGlobal.h"
#include "IfcCoordinateReferenceSystem.h"
class IFCPP_EXPORT IfcIdentifier;
class IFCPP_EXPORT IfcNamedUnit;
//ENTITY
class IFCPP_EXPORT IfcProjectedCRS : public IfcCoordinateReferenceSystem
{ 
public:
	IfcProjectedCRS();
	IfcProjectedCRS( int id );
	~IfcProjectedCRS();
	virtual shared_ptr<IfcPPObject> getDeepCopy( IfcPPCopyOptions& options );
	virtual void getStepLine( std::stringstream& stream ) const;
	virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
	virtual void readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<IfcPPEntity> >& map );
	virtual void setInverseCounterparts( shared_ptr<IfcPPEntity> ptr_self );
	virtual size_t getNumAttributes() { return 7; }
	virtual void getAttributes( std::vector<std::pair<std::string, shared_ptr<IfcPPObject> > >& vec_attributes );
	virtual void getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<IfcPPObject> > >& vec_attributes );
	virtual void unlinkFromInverseCounterparts();
	virtual const char* className() const { return "IfcProjectedCRS"; }
	virtual const std::wstring toString() const;


	// IfcCoordinateReferenceSystem -----------------------------------------------------------
	// attributes:
	//  shared_ptr<IfcLabel>							m_Name;
	//  shared_ptr<IfcText>								m_Description;				//optional
	//  shared_ptr<IfcIdentifier>						m_GeodeticDatum;			//optional
	//  shared_ptr<IfcIdentifier>						m_VerticalDatum;			//optional
	// inverse attributes:
	//  std::vector<weak_ptr<IfcCoordinateOperation> >	m_HasCoordinateOperation_inverse;

	// IfcProjectedCRS -----------------------------------------------------------
	// attributes:
	shared_ptr<IfcIdentifier>						m_MapProjection;			//optional
	shared_ptr<IfcIdentifier>						m_MapZone;					//optional
	shared_ptr<IfcNamedUnit>						m_MapUnit;					//optional
};

