/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "IfcPPBasicTypes.h"
#include "IfcPPObject.h"
#include "IfcPPGlobal.h"

// TYPE IfcWindowTypeEnum = ENUMERATION OF	(WINDOW	,SKYLIGHT	,LIGHTDOME	,USERDEFINED	,NOTDEFINED);
class IFCPP_EXPORT IfcWindowTypeEnum : virtual public IfcPPObject
{
public:
	enum IfcWindowTypeEnumEnum
	{
		ENUM_WINDOW,
		ENUM_SKYLIGHT,
		ENUM_LIGHTDOME,
		ENUM_USERDEFINED,
		ENUM_NOTDEFINED
	};

	IfcWindowTypeEnum();
	IfcWindowTypeEnum( IfcWindowTypeEnumEnum e ) { m_enum = e; }
	~IfcWindowTypeEnum();
	virtual const char* className() const { return "IfcWindowTypeEnum"; }
	virtual shared_ptr<IfcPPObject> getDeepCopy( IfcPPCopyOptions& options );
	virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
	virtual const std::wstring toString() const;
	static shared_ptr<IfcWindowTypeEnum> createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<IfcPPEntity> >& map );
	IfcWindowTypeEnumEnum m_enum;
};

