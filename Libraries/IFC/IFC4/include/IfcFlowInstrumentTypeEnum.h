/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "IfcPPBasicTypes.h"
#include "IfcPPObject.h"
#include "IfcPPGlobal.h"

// TYPE IfcFlowInstrumentTypeEnum = ENUMERATION OF	(PRESSUREGAUGE	,THERMOMETER	,AMMETER	,FREQUENCYMETER	,POWERFACTORMETER	,PHASEANGLEMETER	,VOLTMETER_PEAK	,VOLTMETER_RMS	,USERDEFINED	,NOTDEFINED);
class IFCPP_EXPORT IfcFlowInstrumentTypeEnum : virtual public IfcPPObject
{
public:
	enum IfcFlowInstrumentTypeEnumEnum
	{
		ENUM_PRESSUREGAUGE,
		ENUM_THERMOMETER,
		ENUM_AMMETER,
		ENUM_FREQUENCYMETER,
		ENUM_POWERFACTORMETER,
		ENUM_PHASEANGLEMETER,
		ENUM_VOLTMETER_PEAK,
		ENUM_VOLTMETER_RMS,
		ENUM_USERDEFINED,
		ENUM_NOTDEFINED
	};

	IfcFlowInstrumentTypeEnum();
	IfcFlowInstrumentTypeEnum( IfcFlowInstrumentTypeEnumEnum e ) { m_enum = e; }
	~IfcFlowInstrumentTypeEnum();
	virtual const char* className() const { return "IfcFlowInstrumentTypeEnum"; }
	virtual shared_ptr<IfcPPObject> getDeepCopy( IfcPPCopyOptions& options );
	virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
	virtual const std::wstring toString() const;
	static shared_ptr<IfcFlowInstrumentTypeEnum> createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<IfcPPEntity> >& map );
	IfcFlowInstrumentTypeEnumEnum m_enum;
};

